# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserCountAggregate {
  id: Int!
  email: Int!
  password: Int!
  name: Int!
  country: Int!
  city: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  email: String
  password: String
  name: String
  country: String
  city: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserMaxAggregate {
  id: String
  email: String
  password: String
  name: String
  country: String
  city: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserCount {
  questions: Int!
  reviews: Int!
  articles: Int!
  comments: Int!
  favoriteProducts: Int!
}

type Question {
  id: ID!
  userId: String!
  question: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type ColorCount {
  products: Int!
}

type Color {
  id: ID!
  color: String!
  products: [Product!]
  _count: ColorCount!
}

type ArticleContent {
  id: ID!
  title: String!
  description: String!
  images: [String!]
  types: ArticleContentTypes!
  articleId: String!
  article: Article!
}

enum ArticleContentTypes {
  LIST
  TEXT
}

type Comment {
  id: ID!
  comment: String!
  userId: String!
  articleId: String!
  user: User!
  article: Article!
}

type ArticleCount {
  content: Int!
  comments: Int!
}

type Article {
  id: ID!
  title: String!
  tags: [String!]
  banner: String!
  viewsCount: Int!
  categoryId: String!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: [ArticleContent!]
  comments: [Comment!]
  category: Category!
  user: User!
  _count: ArticleCount!
}

type CategoryCount {
  products: Int!
  brands: Int!
  articles: Int!
}

type Category {
  id: ID!
  title: String!
  banner: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [Product!]
  brands: [Brand!]
  articles: [Article!]
  _count: CategoryCount!
}

type BrandCount {
  products: Int!
}

type Brand {
  id: ID!
  title: String!
  categoryId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  category: Category!
  products: [Product!]
  _count: BrandCount!
}

type ProductCount {
  colors: Int!
  reviews: Int!
  usersFavorite: Int!
}

type Product {
  id: ID!
  title: String!
  description: String!
  rating: Int!
  price: Int!
  images: [String!]
  characteristics: JSON!
  brandId: String!
  categoryId: String!
  viewsCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  colors: [Color!]
  brand: Brand!
  category: Category!
  reviews: [Review!]
  usersFavorite: [User!]
  _count: ProductCount!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Review {
  id: ID!
  userId: String!
  productId: String!
  message: String!
  starsCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  product: Product!
}

type User {
  id: ID!
  email: String!
  password: String!
  name: String!
  country: String!
  city: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  questions: [Question!]
  reviews: [Review!]
  articles: [Article!]
  comments: [Comment!]
  favoriteProducts: [Product!]
  _count: UserCount!
}

type UploadedFile {
  filename: String!
  url: String!
}

type CategoryCountAggregate {
  id: Int!
  title: Int!
  banner: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type CategoryMinAggregate {
  id: String
  title: String
  banner: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CategoryMaxAggregate {
  id: String
  title: String
  banner: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BrandCountAggregate {
  id: Int!
  title: Int!
  categoryId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type BrandMinAggregate {
  id: String
  title: String
  categoryId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BrandMaxAggregate {
  id: String
  title: String
  categoryId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductCountAggregate {
  id: Int!
  title: Int!
  description: Int!
  rating: Int!
  price: Int!
  images: Int!
  characteristics: Int!
  brandId: Int!
  categoryId: Int!
  viewsCount: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ProductAvgAggregate {
  rating: Float
  price: Float
  viewsCount: Float
}

type ProductSumAggregate {
  rating: Int
  price: Int
  viewsCount: Int
}

type ProductMinAggregate {
  id: String
  title: String
  description: String
  rating: Int
  price: Int
  brandId: String
  categoryId: String
  viewsCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductMaxAggregate {
  id: String
  title: String
  description: String
  rating: Int
  price: Int
  brandId: String
  categoryId: String
  viewsCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ColorCountAggregate {
  id: Int!
  color: Int!
  _all: Int!
}

type ColorMinAggregate {
  id: String
  color: String
}

type ColorMaxAggregate {
  id: String
  color: String
}

type ReviewCountAggregate {
  id: Int!
  userId: Int!
  productId: Int!
  message: Int!
  starsCount: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ReviewAvgAggregate {
  starsCount: Float
}

type ReviewSumAggregate {
  starsCount: Int
}

type ReviewMinAggregate {
  id: String
  userId: String
  productId: String
  message: String
  starsCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ReviewMaxAggregate {
  id: String
  userId: String
  productId: String
  message: String
  starsCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type QuestionCountAggregate {
  id: Int!
  userId: Int!
  question: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type QuestionMinAggregate {
  id: String
  userId: String
  question: String
  createdAt: DateTime
  updatedAt: DateTime
}

type QuestionMaxAggregate {
  id: String
  userId: String
  question: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ArticleCountAggregate {
  id: Int!
  title: Int!
  tags: Int!
  banner: Int!
  viewsCount: Int!
  categoryId: Int!
  userId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ArticleAvgAggregate {
  viewsCount: Float
}

type ArticleSumAggregate {
  viewsCount: Int
}

type ArticleMinAggregate {
  id: String
  title: String
  banner: String
  viewsCount: Int
  categoryId: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ArticleMaxAggregate {
  id: String
  title: String
  banner: String
  viewsCount: Int
  categoryId: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CommentCountAggregate {
  id: Int!
  comment: Int!
  userId: Int!
  articleId: Int!
  _all: Int!
}

type CommentMinAggregate {
  id: String
  comment: String
  userId: String
  articleId: String
}

type CommentMaxAggregate {
  id: String
  comment: String
  userId: String
  articleId: String
}

type Query {
  getProfile: User!
  findAllCategories: [Category!]!
  findByIdCategory(id: String!): Category!
  getCategoriesForMenu: [Category!]!
  findAllBrands: [Brand!]!
  findBrandById(id: String!): Brand!
  findAllProducts: [Product!]!
  findProductById(id: String!): Product!
  findPopularProducts: [Product!]!
  searchProducts(search: String!): [Product!]!
  findAllColors: [Color!]!
  findColorById(id: String!): Color!
  findAllReviews: [Review!]!
  findReviewById(id: String!): Review!
  findAllQuestions: [Question!]!
  findQuestionById(id: String!): Question!
  findAllArticles(take: Float, skip: Float, search: String, categoryId: String, tag: String): [Article!]!
  findArticleById(id: String!): Article!
}

type Mutation {
  uploadFile(file: Upload!): UploadedFile!
  updateUser(body: UpdateUserDto!): User!
  register(body: CreateUserDto!): User!
  login(body: AuthDto!): User!
  logout: String!
  createCategory(body: CategoryDto!): Category!
  createBrand(body: BrandDto!): Brand!
  createProduct(body: CreateProductDto!): Product!
  updateProduct(id: String!, body: UpdateProductDto!): Product!
  deleteProduct(id: String!): Product!
  createColor(body: ColorDto!): Color!
  createReview(dto: ReviewDto!): Review!
  createQuestion(dto: QuestionDto!): Question!
  createArticle(body: CreateArticleDto!): Article!
  createComment(body: CommentDto!): Comment!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdateUserDto {
  country: String
  city: String
  name: String
}

input CreateUserDto {
  email: String!
  password: String!
  name: String!
}

input AuthDto {
  email: String!
  password: String!
}

input CategoryDto {
  title: String!
}

input BrandDto {
  title: String!
  categoryId: String!
}

input CreateProductDto {
  title: String!
  description: String!
  price: Float!
  brandId: String!
  categoryId: String!
  characteristics: JSONObject!
  rating: Float!
  colors: [String!]!
  images: [String!]!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input UpdateProductDto {
  title: String
  description: String
  price: Float
  characteristics: JSONObject
  rating: Float
  images: [String!]
}

input ColorDto {
  color: String!
}

input ReviewDto {
  message: String!
  starsCount: Float!
  productId: String!
}

input QuestionDto {
  question: String!
}

input CreateArticleDto {
  title: String!
  tags: [String!]!
  content: [ArticleContentInput!]!
  banner: String!
  categoryId: String!
}

input ArticleContentInput {
  title: String!
  description: String!
  images: [String!]
  types: String!
}

input CommentDto {
  comment: String!
  articleId: String!
}