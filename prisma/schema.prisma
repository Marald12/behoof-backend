generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/shared/prismagraphql"
  reExport = Directories
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String
  name     String

  country String @default("")
  city    String @default("")

  questions Question[]
  reviews   Review[]
  articles  Article[]
  comments  Comment[]

  favoriteProducts Product[] @relation("UserFavorites")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Product {
  id              String   @id @default(uuid())
  title           String
  description     String
  rating          Int
  price           Int
  images          String[]
  characteristics Json
  colors          Color[]  @relation("ProductColors")
  brand           Brand    @relation(fields: [brandId], references: [id])
  brandId         String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  reviews    Review[]

  viewsCount Int @default(0) @map("views_count")

  usersFavorite User[] @relation("UserFavorites")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("products")
}

model Category {
  id    String @id @default(uuid())
  title String

  products Product[]
  brands   Brand[]
  articles Article[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Brand {
  id String @id @default(uuid())

  title String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("brands")
}

model Color {
  id    String @id @default(uuid())
  color String

  products Product[] @relation("ProductColors")

  @@map("colors")
}

model Question {
  id String @id @default(uuid())

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  question String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("questions")
}

model Review {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  message    String
  starsCount Int    @map("stars_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}

model Article {
  id String @id @default(uuid())

  title      String
  tags       String[]
  content    ArticleContent[]
  banner     String
  viewsCount Int              @default(0) @map("views_count")
  comments   Comment[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("articles")
}

model ArticleContent {
  id String @id @default(uuid())

  title       String
  description String
  images      String[]            @default([])
  types       ArticleContentTypes @default(TEXT)

  article   Article @relation(fields: [articleId], references: [id])
  articleId String

  @@map("article_contents")
}

enum ArticleContentTypes {
  LIST
  TEXT
}

model Comment {
  id String @id @default(uuid())

  comment String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  article   Article @relation(fields: [articleId], references: [id])
  articleId String

  @@map("comments")
}
